##############################################################################################################
module Zgomot::Midi

  #####-------------------------------------------------------------------------------------------------------
  class Channel

    #.........................................................................................................
    include Zgomot::Comp::Transforms
    
    #####-------------------------------------------------------------------------------------------------------
    class << self
      
      #.........................................................................................................
      @channels = []

      #.........................................................................................................
      attr_reader :channels

      #.........................................................................................................
      def ch(num, opts={})
        channels << new(is_valid(num))
      end

      #.........................................................................................................
      def is_valid(num)
        [num].flatten.each{|n| raise ZgomotError "1<= channel <= 16" if num > 15 or num < 1}
      end

      #.........................................................................................................
      def release(chan)
        channels.delete_if{|c| c.eql?(chan)}
      end

    #### self
    end
    
    #####-------------------------------------------------------------------------------------------------------
    attr_reader :number, :clock, :pattern
    
    #.........................................................................................................
    def intitialize(num)
      @pattern = []
      @number = number
      @clock = Clock.new
      @notes = []
    end

    #.........................................................................................................
    def notes
      @notes.flatten.compact 
    end
    
    #.........................................................................................................
    def <<(item)
      add_at_time(item)
    end

    #.........................................................................................................
    def +(items)
      raise ArgumentError "must be Array" unless items.kind_of?(Array)
      items.each {|n| add_at_time(n)}
    end
    
    #.........................................................................................................
    def method_missing(method, *args, &blk )
      return @notes.send(method, *args, &blk)
    end

  private
  
  #.........................................................................................................
  def add_at_time(item)
    items = [item].flatten
    items.flatten.each do |n|
      raise ArgumentError "must be Zgomot::Midi::Note" unless n.kind_of?(Zgomot::Midi::Note)  
      if n.pitch_class.eql?(:R)    
        n.time = clock.current_time
        @notes << note
      end
    end    
    clock.update(items.first.sec)
  end
  
  #### Channel
  end

#### Zgomot::Midi 
end
