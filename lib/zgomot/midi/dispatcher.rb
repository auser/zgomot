##############################################################################################################
module Zgomot::Midi

  #####-------------------------------------------------------------------------------------------------------
  class Dispatcher

    #.........................................................................................................
    @queue = []
    @queue.extend(MonitorMixin)
    
    #.........................................................................................................
    @clock = Clock.new
    @tick = Clock.tick_sec

    #####-------------------------------------------------------------------------------------------------------
    class << self
      
      #.........................................................................................................
      attr_reader :resolution, :queue, :thread, :clock, :tick

      #.........................................................................................................
      def flush
        @queue.clear
      end

      #.........................................................................................................
      def enqueue(ch)
        queue.synchronize do
          @queue += ch.notes
        end
      end
        
      #.........................................................................................................
      def dequeue(time)
        queue.synchronize do
          ready, @queue = queue.partition {|n| n.play_at <= time}
        end
      end

    private

      #.........................................................................................................
      def dispatch
        dequeue(::Time.now.to_f)
      end

    #### self
    end

    #.........................................................................................................
    @thread = Thread.new do
      loop do
        dispatch        
        clock.update(tick)
        sleep(tick)
      end
    end

  #### Dispatcher
  end

#### Zgomot::Midi 
end
