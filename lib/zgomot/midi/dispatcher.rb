##############################################################################################################
module Zgomot::Midi

  #####-------------------------------------------------------------------------------------------------------
  class Dispatcher

    #.........................................................................................................
    @queue = []
    @clock = Clock.new
    @tick = Clock.tick_sec

    #####-------------------------------------------------------------------------------------------------------
    class << self
      
      #.........................................................................................................
      attr_reader :resolution, :queue, :thread, :clock, :tick

      #.........................................................................................................
      def flush
        @queue.clear
      end

    private

      #.........................................................................................................
      def dispatch
        now = ::Time.now.to_f
        # ready, @queue = @queue.partition {|n| n.time.to_f <= now.to_f}
      end

    #### self
    end

    #.........................................................................................................
    @thread = Thread.new do
      loop do
        dispatch
p tick        
        clock.update(tick)
p tick
        sleep(tick)
      end
    end

  #### Dispatcher
  end

#### Zgomot::Midi 
end
