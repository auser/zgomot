##############################################################################################################
module Zgomot::Midi

  #####-------------------------------------------------------------------------------------------------------
  class Stream

    #.........................................................................................................
    @streams = []

    #####-------------------------------------------------------------------------------------------------------
    class << self
      
      #.........................................................................................................
      attr_reader :streams

      #.........................................................................................................
      def str(name, opts={}, &blk)
        strm = new()
        opts[:infinite] = true if blk.arity > 0 
        if opts[:infinite]
        else
          strm.define_meta_class_method(:play, &blk) 
        end           
        @streams << strm
      end

      #.........................................................................................................
      def play 
        streams.each{|s| s.dispatch(::Time.now.to_f + Zgomot::PLAY_DELAY)}
      end
      
    #### self
    end
    
    #####-------------------------------------------------------------------------------------------------------
    attr_reader :channels
    
    #.........................................................................................................
    def initialize()
    end

    #.........................................................................................................
    def dispatch(time)       
      if (chan = play).kind_of?(Zgomot::Midi::Channel)        
        Zgomot::Midi::Dispatcher.enqueue(chan.time_shift(time))
      end
    end

  #### Stream
  end

#### Zgomot::Midi 
end
