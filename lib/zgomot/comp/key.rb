##############################################################################################################
module Zgomot::Comp

  #####-------------------------------------------------------------------------------------------------------
  class Key
    
    #####-------------------------------------------------------------------------------------------------------
    attr_reader :tonic, :mode
  
    #.........................................................................................................
    def initialize(tonic, mode)
      @mode = mode.kind_of?(:Mode) ? mode : Mode.new(mode)
      @tonic = tonic
    end

    #.........................................................................................................
    def piches
      get_pitches
    end

  private
  
    #.........................................................................................................
    def get_pitches
      pc = mode.inject([tonic.first]) do |p,i| 
             p << Zgomot::Midi::Note.next_pitch_class(tonic.first, sum(mode[0..i]))
           end
    end
    
    #.........................................................................................................
    def sum(a)
      a.inject(0) {|s,n| s+n}
    end
  
  #### Key
  end

#### Zgomot::Comp 
end
