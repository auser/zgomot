##############################################################################################################
module Zgomot::Comp

  #####-------------------------------------------------------------------------------------------------------
  class Markov
      
    #.........................................................................................................
    attr_reader :current_state, :states
    
    #.........................................................................................................
    def initialize
      @current_state, @states = args[:state] || 0, []
    end

    #.........................................................................................................
    def add(trans, &blk)
      @states << {:trans=>sum_trans(trans), :blk => blk}
    end

    #.........................................................................................................
    def next(args)
      r, state = rand, states[@current_state]
      @current_state = state[:trans].select{|t| r <= t}.count-1
      Zgomot.logger.info "CURRENT MARKOV STATE: #{current_state}"
      states[@current_state][:blk].call(args)
    end

    #.........................................................................................................
    def method_missing(meth, *args, &blk )
    end

    #.........................................................................................................
    # private
    #.........................................................................................................
    def sum_trans(trans)      
      sums = []; trans.each_index{|i| sums[i] = trans[0..i].inject(0){|s,v| s+v}}; sums      
    end
       
    #.........................................................................................................
    private :sum_trans
          
  #### Markov
  end

#### Zgomot::Comp 
end
