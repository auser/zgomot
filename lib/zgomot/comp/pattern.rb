##############################################################################################################
module Zgomot::Comp

  #####-------------------------------------------------------------------------------------------------------
  class Pattern

    #####-------------------------------------------------------------------------------------------------------
    class << self
    
      #.......................................................................................................
      def n(p=[:C,4], len=4, v=0.6)
        Zgomot::Midi::Note.new(:pitch => p, :length => len, :velocity => (127.0*v).to_i)
      end

      #.........................................................................................................
      def c(root, chord=:maj, len=4, v=0.6)
        Chord.new(:root => root, :chord => chord, :length => len, :velocity => (127.0*v).to_i)
      end

      #.........................................................................................................
      def np(tonic=[:C,4], mode=0, len=4, v=0.6)
        Progression.new(:item => Note::Progression.new, :tonic => tonic, :mode => mode, :length => len, :velocity => (127.0*v).to_i)
      end

    #### self
    end

    #...........................................................................................................
    attr_reader :seq
    
    #...........................................................................................................
    def initialize(seq)
      @seq = [seq].flatten
    end

    #.........................................................................................................
    def method_missing(method, *args, &blk )
      @seq = seq.map do |p|
               p.respond_to?(method) ? p.send(method, *args, &blk) : p
             end
      self
    end

  #### Pattern
  end

#### Zgomot ::Comp
end
