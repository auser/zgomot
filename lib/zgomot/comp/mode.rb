##############################################################################################################
module Zgomot::Comp

  #####-------------------------------------------------------------------------------------------------------
  class Mode
    
    #.........................................................................................................
    @modes = [:ionian, :dorian, :phrygian, :lydian, :mixolydian, :aeolian, :locrian]
    @intervals = [2,2,1,2,2,2,1]
    chords = {:scale => [[1,3,5], [2,4,6], [3,5,7], [4,6,1], [5,7,2], [6,1,3], [7,2,4]],
              :maj   => [[1,3,5], [4,6,1], [5,7,2]],
              :min   => [[2,4,6], [3,5,7], [6,1,3]],  
              :dim   => [[7,2,4]],                                                                                            
              :sus2  => [[1,2,5], [2,5,6], [3,6,7], [5,1,2], [6,2,3]],
              :sus4  => [[1,2,5], [2,3,6], [4,5,1], [5,6,2], [6,7,3]],
              :aug   => []}
    
    #####-------------------------------------------------------------------------------------------------------
    class << self
    
      #.........................................................................................................
      attr_reader :modes, :intervals, :chords
    
    #### self  
    end
    
    #####-------------------------------------------------------------------------------------------------------
    attr_reader :scale, :mode
  
    #.........................................................................................................
    def initialize(mode = 1)
      @mode = if mode.kind_of?(Symbol)
                self.class.modes.index(mode)+1
              else
                mode if mode > 0 and mode <= 7
              end
      raise(Zgomot::Error, "'#{mode}' is invalid mode") if @mode.nil?
      @scale = Scale.new(self.class.intervals, @mode)        
    end
      
    #.........................................................................................................
    def chords(type = :scale)
      shift_chords(Mode.chords[type].clone)
    end
    
    #.........................................................................................................
    def method_missing(method, *args, &blk )
      scale.send(method, *args, &blk)
    end

    #.........................................................................................................
    def shift_chords(cs)
      mode.times{cs.push(cs.shift)}  
      cs.map do |c|
        c.map do |n|
          s = n - mode
          s += 7 if s < 1
        end
      end      
    end

    #.........................................................................................................
    private :shift_chords
      
  #### Mode
  end

#### Zgomot::Comp 
end
