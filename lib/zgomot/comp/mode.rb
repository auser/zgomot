##############################################################################################################
module Zgomot::Comp

  #####-------------------------------------------------------------------------------------------------------
  class Mode
    
    #.........................................................................................................
    @modes = [:ionian, :dorian, :phrygian, :lydian, :mixolydian, :aeolian, :locrian]
    @intervals = [2,2,1,2,2,2,1]
    chords = {:scale => [[:maj,1], [:min,2], [:min,3], [:maj,4], [:maj,5], [:min,6], [:dim,7]],
              :maj   => [[:maj,1], [:maj,4], [:maj,5]],
              :min   => [[:min,2], [:min,3], [:min,6]],  
              :dim   => [[:dim,7]],                                                                                            
              :sus2  => [[:sus2,1], [:sus2,2], [:sus2,4], [:sus2,5], [:sus2,6]],
              :sus4  => [[:sus4,1], [:sus4,2], [:sus4,3] ,[:sus4,5], [:sus4,6]],
              :aug   => []}
    
    #####-------------------------------------------------------------------------------------------------------
    class << self
    
      #.........................................................................................................
      attr_reader :modes, :intervals, :chords
    
    #### self  
    end
    
    #####-------------------------------------------------------------------------------------------------------
    attr_reader :scale, :mode
  
    #.........................................................................................................
    def initialize(mode = 1)
      @mode = if mode.kind_of?(Symbol)
                self.class.modes.index(mode)+1
              else
                mode if mode > 0 and mode <= 7
              end
      raise(Zgomot::Error, "'#{mode}' is invalid mode") if @mode.nil?
      @scale = Scale.new(self.class.intervals, @mode)        
    end
      
    #.........................................................................................................
    def chords(type = :scale)
      shift_chords(Mode.chords[type].clone)
    end
    
    #.........................................................................................................
    def method_missing(method, *args, &blk )
      scale.send(method, *args, &blk)
    end

    #.........................................................................................................
    def shift_chords(cs)
      mode.times{cs.push(cs.shift)}  
      cs.map do |c|
        s = c.last - mode
        s += 7 if s < 1
        [c.first, s]
      end      
    end

    #.........................................................................................................
    private :shift_chords
      
  #### Mode
  end

#### Zgomot::Comp 
end
